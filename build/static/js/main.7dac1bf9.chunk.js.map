{"version":3,"sources":["components/header.js","components/form.js","components/contact.js","components/contactList.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","to","name","onClick","sort","style","sortBy","fontWeight","type","onChange","search","empty","Form","id","useParams","useState","input","setInput","contact","getContact","useEffect","handleChange","event","value","target","prev","fName","autoComplete","lName","phone","email","address1","address2","address3","updateContact","Contact","setContact","ContactList","contacts","map","key","_id","deleteContact","searching","App","items","setContacts","searchItems","setSearchItems","URL","getData","axios","get","then","result","data","catch","err","console","log","find","post","getAttribute","str","searchResults","filter","toUpperCase","startsWith","exact","path","preventDefault","delete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7dac1bf9.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = (props) => {\n  return (\n    <div className=\"header\">\n      <Link className=\"text-link\" to={`/`}>\n        <h1>Address Book</h1>\n      </Link>\n      <Link className=\"text-link\" to={`/`}>\n        <h4 className=\"text-link\">ADD A FRIEND</h4>\n      </Link>\n      <h4\n        className=\"text-link\"\n        name=\"fName\"\n        onClick={props.sort}\n        style={\n          props.sortBy === 'fName' ? { fontWeight: 700 } : { fontWeight: 300 }\n        }\n      >\n        SORT BY FIRST NAME\n      </h4>\n      <h4\n        className=\"text-link\"\n        name=\"lName\"\n        onClick={props.sort}\n        style={\n          props.sortBy === 'lName' ? { fontWeight: 700 } : { fontWeight: 300 }\n        }\n      >\n        SORT BY LAST NAME\n      </h4>\n      <h4 className=\"text-link\">SEARCH</h4>\n      <input className=\"search-input\" type=\"text\" onChange={props.search} />\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\n\nconst empty = {};\nconst Form = (props) => {\n  let { id } = useParams();\n\n  const [input, setInput] = useState({});\n\n  const contact = id ? props.getContact(id) : empty;\n\n  useEffect(() => {\n    setInput(contact);\n  }, [contact]);\n\n  const handleChange = (event) => {\n    let value = event.target.value;\n    let name = event.target.name;\n\n    setInput((prev) => {\n      return { ...prev, [name]: value };\n    });\n  };\n\n  if (!input) {\n    return <div />;\n  } else {\n    return (\n      <div className=\"form-wrapper\">\n        <h2 className=\"headline\">{id ? 'Make a change' : 'Add a friend'}</h2>\n        <form className=\"input-form\">\n          <div className=\"input-item\">\n            <label>First name</label>\n            <br />\n            <input\n              type=\"text\"\n              value={input.fName || ''}\n              name=\"fName\"\n              onChange={handleChange}\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"input-item\">\n            <label>Last name</label>\n            <br />\n            <input\n              type=\"text\"\n              value={input.lName || ''}\n              name=\"lName\"\n              onChange={handleChange}\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"input-item\">\n            <label>Phone</label>\n            <br />\n            <input\n              type=\"text\"\n              value={input.phone || ''}\n              name=\"phone\"\n              onChange={handleChange}\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"input-item\">\n            <label>Email</label>\n            <br />\n            <input\n              type=\"text\"\n              value={input.email || ''}\n              name=\"email\"\n              onChange={handleChange}\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"input-item\">\n            <label>Address</label>\n            <br />\n            <input\n              type=\"text\"\n              value={input.address1 || ''}\n              name=\"address1\"\n              onChange={handleChange}\n              autoComplete=\"off\"\n            />\n            <br />\n            <input\n              type=\"text\"\n              value={input.address2 || ''}\n              name=\"address2\"\n              onChange={handleChange}\n              autoComplete=\"off\"\n            />\n            <br />\n            <input\n              type=\"text\"\n              value={input.address3 || ''}\n              name=\"address3\"\n              onChange={handleChange}\n              autoComplete=\"off\"\n            />\n            <br />\n          </div>\n\n          <Link\n            to=\"/\"\n            className=\"btn\"\n            onClick={() => {\n              setInput({});\n              props.updateContact(input);\n            }}\n          >\n            SAVE\n          </Link>\n        </form>\n      </div>\n    );\n  }\n};\n\nexport default Form;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Contact = (props) => {\n  const { id } = useParams();\n  const [contact, setContact] = useState([]);\n\n  useEffect(() => {\n    setContact(props.getContact(id));\n  }, [props, id]);\n\n  if (!contact) {\n    return null;\n  } else {\n    return (\n      <div className=\"contact-card--wrapper\">\n        <h2 className=\"headline\">\n          {contact.fName} {contact.lName}\n        </h2>\n        <div className=\"contact-card\">\n          <div className=\"contact-card--labels\">\n            <p>Phone:</p>\n            <p>Email:</p>\n            <p>Address:</p>\n          </div>\n          <div className=\"contact-card--info\">\n            <p>{contact.phone || '-'}</p>\n            <p>{contact.email || '-'}</p>\n            <p>{contact.address1 || '-'}</p>\n            <p>{contact.address2}</p>\n            <p>{contact.address3}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Contact;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ContactList = (props) => {\n  return (\n    <ul className=\"contact-list\">\n      {props.contacts.map((contact) => {\n        return (\n          <li key={contact._id} id={contact._id} className=\"list-item\">\n            <Link to={`/contact/${contact._id}`}>\n              <i className=\"fa fa-user\"></i>\n            </Link>\n            <h2>\n              {contact.fName} {contact.lName}\n            </h2>\n            <Link to={`/edit/${contact._id}`}>\n              <i className=\"fa fa-edit\"></i>\n            </Link>\n            <i\n              className=\"fa fa-trash\"\n              id={contact._id}\n              onClick={props.deleteContact}\n            ></i>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\n\nimport Header from './components/header';\nimport Form from './components/form';\nimport Contact from './components/contact';\nimport ContactList from './components/contactList';\n\nlet sortBy = 'fName';\nlet searching = false;\n\nfunction App() {\n  const [contacts, setContacts] = useState({ items: [] });\n  const [searchItems, setSearchItems] = useState([]);\n  const URL = 'https://joniverse-addressbook.herokuapp.com/';\n\n  // GET DATA ATT INITIAL LOAD\n  useEffect(() => {\n    getData();\n  }, []);\n\n  // GET ALL DATA FROM *DATABASE*\n  const getData = () => {\n    axios\n      .get(URL + sortBy)\n      .then((result) => {\n        setContacts({ items: result.data });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // GET SINGLE CONTACT FROM *STATE*\n  const getContact = (id) => {\n    const contact = contacts.items.find((contact) => contact._id === id);\n    return contact;\n  };\n\n  // ADD NEW OR UPDATE SINGLE CONTACT TO *DATABASE*\n  const updateContact = (input) => {\n    if (!input._id) {\n      axios\n        .post(URL + 'add/', input)\n        .then(() => {\n          getData();\n        })\n        .catch((err) => console.log(err));\n    } else {\n      axios\n        .post(`${URL}update/${input._id}`, input)\n        .then(() => {\n          getData();\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  // DELETE CONTACT FROM *SERVER*\n  const deleteContact = (event) => {\n    event.preventDefault();\n    axios\n      .delete(URL + 'delete/' + event.target.id)\n      .then(() => {\n        getData();\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // SORT CONTACTS\n  const sort = (event) => {\n    sortBy = event && event.target.getAttribute('name');\n    getData();\n  };\n\n  // SEARCH\n  const search = (event) => {\n    searching = event.target.value ? true : false;\n    const items = [...contacts.items];\n    let str = event.target.value;\n\n    let searchResults = items.filter(\n      (contact) =>\n        contact.fName.toUpperCase().startsWith(str.toUpperCase()) ||\n        contact.lName.toUpperCase().startsWith(str.toUpperCase())\n    );\n    setSearchItems(searchResults);\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"bg\">\n          <Header sort={sort} search={search} sortBy={sortBy} />\n          <div className=\"content\">\n            <div className=\"left\">\n              <Switch>\n                <Route exact path=\"/\">\n                  <Form updateContact={updateContact} />\n                </Route>\n                <Route path=\"/edit/:id\">\n                  <Form getContact={getContact} updateContact={updateContact} />\n                </Route>\n                <Route path=\"/contact/:id\">\n                  <Contact getContact={getContact} />\n                </Route>\n              </Switch>\n            </div>\n            <div className=\"right\">\n              <ContactList\n                contacts={searching ? searchItems : contacts.items}\n                deleteContact={deleteContact}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}